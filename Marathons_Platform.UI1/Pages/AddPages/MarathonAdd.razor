@page "/marathon/add"
@using System.Text.Json
@inject IMarathonService<MarathonDto,MarathonCreateDto, MarathonUpdateDto> MarathonService
@inject IThemeService<ThemeDto,ThemeCreateDto> ThemeService
@inject IMapper Mapper
@inject NavigationManager NavigationManager


<PageTitle>Create New marathon </PageTitle>
<h3>Create New marathon</h3>
<EditForm Model="@createMar" OnValidSubmit="HandleCreateSubmit" FormName="createMarathon">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label>Title</label>
        <InputText @bind-Value="createMar.Title" class="form-control"></InputText>
    </div>
    <div>
        <label>Theme</label>
        <InputSelect @bind-Value="createMar.ThemeId" class="form-control">
            @if (createMar.ThemeId == null)
            {
                <option value="">Select theme...</option>
            }
            else
            {
                <option value="@selectedTheme?.Id">@selectedTheme?.Title</option>
            }
            @foreach (var theme in themes)
            {
                <option value="@theme.Id">@theme.Title</option>
            }
        </InputSelect>
    </div>
    <div>
        <label>Description</label>
        <InputText @bind-Value="createMar.Description" class="form-control"></InputText>
    </div>
    <div>
        <label>Date of start</label>
        <InputDate @bind-Value="createMar.DateOfStart" class="form-control"></InputDate>
    </div>
    <div>
        <label>Duration</label>
        <InputNumber @bind-Value="createMar.Duration" class="form-control"></InputNumber>
    </div>
    <br />

    <button type="submit" class="btn btn-primary">Create Marathon</button>
</EditForm>
@code {
    MarathonCreateDto createMar { get; set; } = new MarathonCreateDto();
    List<ThemeDto> themes = new List<ThemeDto>();
    ThemeDto selectedTheme = new ThemeDto();
    protected override async Task OnInitializedAsync()
    {
        themes = await ThemeService.GetThemes();
    }
    async Task HandleCreateSubmit()
    {
        Console.WriteLine(JsonSerializer.Serialize(createMar));
        await MarathonService.AddMarathon(createMar);
        Console.WriteLine("Created successfully");
    }

}
