@page "/marathon/{id:int}/{exid:int}"
@using System.Text.Json
@inject IMarathonService<MarathonDto,MarathonCreateDto, MarathonUpdateDto> MarathonService
@inject IExerciseService<ExerciseDto,ExerciseCreateDto, ExerciseUpdateDto> ExerciseService
@inject IUserExerciseStatusService<UserExerciseStatusesDto,UserExerciseStatusesCreateDto> uesService
@inject IProgressService<ProgressDto,ProgressCreateDto, ProgressAddDto> ProgressService
@inject IBadgeMarathonService<BadgeMarathonDto,BadgeMarathonCreateDto> badgeMarathonService
@inject IUserBadgeService<UserBadgeDto,UserBadgeCreateDto> userBadgeService
@inject AuthService authService
@inject IMapper _mapper
@inject NavigationManager NavigationManager

<PageTitle>@mar.Title. Day @ex.DayNum @ex.Title</PageTitle>
<div class="d-flex flex-row">

    <div class="d-flex justify-content-start align-items-center">
        <nav class="navclass">
           
                <ul class="d-flex flex-column">
                    @foreach (var ex in exercisesInMar)
                    {
                    <a class="btn-outline-dark" @onclick="() => NavigateToExercise(ex.Id)">
                        <h4>Day @ex.DayNum @CheckIfDone(ex.Id)</h4>
                        </a>
                    }
                </ul>
        </nav>
    </div>
<div class="d-flex flex-column align-items-center p-5 w-100">
    <h2 class="text-center">@mar.Title</h2>
    <h3><strong>@ex.Title</strong></h3>
    <p class="article-start">@ex.Description</p>
    <div class="d-flex justify-content-center">
    <iframe width="560" height="315" src="@ex.URL" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen onended="()=> ChangeBool()"></iframe>
    <br />
</div>
        <button class="btn-outline-dark btn-sm shadow-sm" @onclick="() => TaskEnded(ex.Id, userId, ex.MarathonId)">Done!</button>

    </div>
</div>

<style>
    .custom-video {
        width: 75%; 
        max-width: 500px; 
        height: auto; 
        border: 2px solid #333;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        background-color: #fff;
    }
</style>
@code {
    [Parameter]
    public int? Id{ get; set; }
    [Parameter]
    public int? Exid{ get; set; }
    bool test = false;
    int userId = 0;
    List<ExerciseDto> exercisesInMar { get; set; } = new List<ExerciseDto>();
    MarathonDto mar { get; set; } = new MarathonDto();
    ExerciseDto ex { get; set; } = new ExerciseDto();
    List<UserExerciseStatusesDto> statusesOfExercises = new List<UserExerciseStatusesDto>();
    List<UserExerciseStatusesDto> statusesOfEx = new List<UserExerciseStatusesDto>();
    UserBadgeCreateDto newUserBadge { get; set; } = new UserBadgeCreateDto();
    List<UserBadgeDto> UsersBadges { get; set; } = new List<UserBadgeDto>();

    protected override async Task OnInitializedAsync()
    {
        exercisesInMar = await ExerciseService.GetExercisesByMarathonId((int)Id);
        mar = await MarathonService.GetMarathonById((int)Id);
        ex = await ExerciseService.GetExerciseById((int)Exid);
        statusesOfEx = new List<UserExerciseStatusesDto>();
        userId = await authService.GetUserId();
        foreach (var task in exercisesInMar)
        {
            statusesOfEx.Add(await uesService.GetStatusByUserAndExerciseId(userId, task.Id));
        }
        CheckIfDone(ex.Id);
        UsersBadges = await userBadgeService.GetUserBadges();
        if (Id is not null)
        {
            var result = await MarathonService.GetMarathonById((int)Id);
            if (result is not null)
            {
                mar = _mapper.Map<MarathonDto>(result);
            }
        }
    }
    private async Task NavigateToExercise(int exerciseId)
    {
        NavigationManager.NavigateTo($"/marathon/{Id}/{exerciseId}",true);
    } 
    private async Task UpdateProgress(int marId, int UserId)
    {
        ProgressDto progress = await ProgressService.GetProgressByUserAndMarathonId(UserId,marId);
        foreach(var task in exercisesInMar)
        {
            statusesOfExercises.Add(await uesService.GetStatusByUserAndExerciseId(UserId, task.Id));
        }
        List<UserExerciseStatusesDto> trueTasks = statusesOfExercises.Where(s => s.Status == true).ToList();
        if (progress.Percent == 100)
        {
            List<BadgeMarathonDto> marathonsBadges;
            marathonsBadges = await badgeMarathonService.GetBadgesMarathon();
            List<BadgeMarathonDto> filtered = marathonsBadges.Where(mB => mB.MarathonId == mar.Id).ToList();
            foreach (var badge in filtered)
            {
                var currentUserBadge = await userBadgeService.GetUserBadgeById(badge.BadgeId);
                if (UsersBadges.Any(b => b.UserId == userId && b.BadgeId == badge.BadgeId))
                {

                }
                else
                {
                    newUserBadge = new UserBadgeCreateDto
                        {
                            UserId = userId,
                            BadgeId = badge.BadgeId,
                            Claimed = DateTime.Now
                        };
                    await userBadgeService.AddUserBadge(newUserBadge);
                }
            }



        }
        else
        {
            progress.Percent = (int)((100.0 / statusesOfExercises.Count) * trueTasks.Count);
            if (progress.Percent == 100)
            {
                List<BadgeMarathonDto> marathonsBadges;
                marathonsBadges = await badgeMarathonService.GetBadgesMarathon();
                List<BadgeMarathonDto> filtered = marathonsBadges.Where(mB => mB.MarathonId == mar.Id).ToList();
                foreach (var badge in filtered)
                {
                    var currentUserBadge = await userBadgeService.GetUserBadgeById(badge.BadgeId);
                    if (UsersBadges.Any(b => b.UserId == userId && b.BadgeId == badge.BadgeId))
                    {

                    }
                    else
                    {
                        newUserBadge = new UserBadgeCreateDto
                            {
                                UserId = userId,
                                BadgeId = badge.BadgeId,
                                Claimed = DateTime.Now
                            };
                        await userBadgeService.AddUserBadge(newUserBadge);
                    }
                }
            }
            await ProgressService.UpdateProgress(progress);

        }
    }
    private async Task TaskEnded(int exId, int userId, int marId)
    {
        var exStatus = await uesService.GetStatusByUserAndExerciseId(userId, exId);
        exStatus.Status = true;
        await uesService.UpdateExerciseStatus(exStatus);
        await UpdateProgress(marId, userId);
    }
    public string CheckIfDone(int exerciseId)
    {
        var status = statusesOfEx.FirstOrDefault(s => s.ExerciseId == exerciseId);
        return status?.Status == true ? "✔" : string.Empty;
    }
}
